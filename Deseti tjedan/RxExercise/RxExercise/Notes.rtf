{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Subjects, once terminated, will re-emit their stop event to future\
subscribers. So it\'92s a good idea to include handlers for stop events in your code, not\
just to be notified when it terminates, but also in case it is already terminated when\
you subscribe to it.\
\
Publish subjects don't replay values to new subscribers. This makes them a good\
choice to model events such as "user tapped something" or "notification just arrived."\
\
Behavior subjects work similarly to publish subjects, except they will replay the latest\
next event to new subscribers.\
\
Replay subjects will temporarily cache, or buffer, the latest elements they emit, up to\
a specified size of your choosing. They will then replay that buffer to new\
subscribers.\
\
Unlike other subjects \'97 and observables in general \'97 you add a value onto a relay by\
using the accept(_:) method. In other words, you don\'92t use onNext(_:). This is\
because relays can only accept values, i.e., you cannot add an error or completed\
event onto them.\
\
A PublishRelay wraps a PublishSubject and a BehaviorRelay wraps a\
BehaviorSubject. 
\f1\b What sets relays apart from their wrapped subjects is that they\
are guaranteed to never terminate.\
\
}